scalar Date @fake(type: pastDate, options: {dateFormat: "X"})


interface Node {
  id: ID!
}

type Query {
  node(id: ID!): Node
  users(first: Int, after: String): UserConnection!
  user(id: ID!): User
}

interface Connection {
  edges: [Edge!]!
  pageInfo: PageInfo!
}

interface Edge {
  node: Node!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean! 
  hasPreviousPage: Boolean! 
  startCursor: String @fake(type:uuid)
  endCursor: String @fake(type: uuid)
}

type User implements Node {
  id: ID! @fake(type:uuid)
  name: String! @fake(type:lastName, locale: ja)
  age: Int! @fake(type:number)
  birthday: Date! 
  gender: Gender! @examples(values: ["MAN", "WOMEN", "UNKNOWN"])
  email: String! @fake(type:email)
}

type UserConnection implements Connection {
  edges: [UserEdge!]! @listLength(min: 10, max: 10)
  pageInfo: PageInfo!
}

type UserEdge implements Edge {
  node: User!
  cursor: String! @fake(type: uuid)
}

enum Gender {
  MAN
  WOMEN
  UNKNOWN
}
