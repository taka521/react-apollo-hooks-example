scalar Date

interface Node {
  id: ID!
}

type Query {
  node(id: ID!): Node
  users(first: Int, after: String): UserConnection!
  user(id: ID!): User
}

interface Connection {
  edges: [Edge!]!
  pageInfo: PageInfo!
}

interface Edge {
  node: Node!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type User implements Node {
  id: ID!
  name: String!
  age: Int!
  birthday: Date!
  gender: Gender!
}

type UserConnection implements Connection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge implements Edge {
  node: User!
  cursor: String!
}

enum Gender {
  MAN
  WOMEN
  UNKNOWN
}
